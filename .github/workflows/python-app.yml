name: CI/CD for mofstructure

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache Poetry virtual environment
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        poetry run pytest

    - name: Build Sphinx Documentation
      run: |
        poetry run sphinx-build -b html docs/source docs/source/_build/html

    - name: Verify build output
      run: |
        ls -la docs/source/_build/html

    - name: Upload Sphinx Documentation Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/source/_build/html

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure build directory exists and create .nojekyll file
        run: |
          mkdir -p docs/source/_build/html
          echo "" > docs/source/_build/html/.nojekyll

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        
  # publish:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: '3.10'

  #   - name: Install Poetry
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install poetry

  #   - name: Publish to PyPI
  #     env:
  #       POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI }}
  #     run: |
  #       poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
  #       poetry publish --build --username __token__ --password $POETRY_PYPI_TOKEN_PYPI
